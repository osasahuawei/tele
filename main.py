import requests
import sys, json, time
import threading
from colorama import Fore, init
import random
import itertools
import logging
import io
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# ÿ™ŸÖŸÉŸäŸÜ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ÿ≠ÿßŸÑÿßÿ™ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©
INPUT_DATA = 1

# ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿ™ÿ∫Ÿäÿ± ŸÑŸÑÿ™ÿ≠ŸÉŸÖ ŸÅŸä ÿßŸÑÿ™ŸàŸÇŸÅ
stop_flag = False
script_running = False
script_thread = None
user_data_store = {}

# ÿßŸÑÿ™ŸÇÿßÿ∑ output ŸÖŸÜ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™
class ScriptOutput:
    def __init__(self):
        self.buffer = io.StringIO()
        self.old_stdout = sys.stdout
        
    def write(self, text):
        self.buffer.write(text)
        self.old_stdout.write(text)
        
    def flush(self):
        self.buffer.flush()
        self.old_stdout.flush()
        
    def get_output(self):
        output = self.buffer.getvalue()
        self.buffer.truncate(0)
        self.buffer.seek(0)
        return output

script_output = ScriptOutput()

# ÿØÿßŸÑÿ© ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
def main_function(number_oner, password_oner, number_men1, password_men1, number_men2, password_men2):
    global stop_flag
    stop_flag = False
    
    init(autoreset=True)
    
    quota_cycle = itertools.cycle(["10", "40"])

    def get_access_token_Owner(number_oner, password_oner):
        url1 = "https://mobile.vodafone.com.eg/auth/realms/vf-realm/protocol/openid-connect/token"
        payload1 = {
            'username': number_oner,
            'password': password_oner,
            'grant_type': "password",
            'client_secret': "a2ec6fff-0b7f-4aa4-a733-96ceae5c84c3",
            'client_id': "my-vodafone-app"
        }
        headers1 = {
            'User-Agent': "okhttp/4.9.3",
            'Accept': "application/json, text/plain, */*",
            'Accept-Encoding': "gzip",
            'x-agent-operatingsystem': "V12.5.13.0.RJQMIXM",
            'clientId': "xxx",
            'x-agent-device': "lime",
            'x-agent-version': "2024.10.1",
            'x-agent-build': "562"
        }

        r1 = requests.post(url1, data=payload1, headers=headers1).json()

        if 'access_token' not in r1:
            print(Fore.RED + "‚ùå Login failed. Check the number or password.")
            return None

        access_token = "Bearer " + r1['access_token']
        print(Fore.GREEN + "‚úÖ Login successful For Owner!")
        return access_token
        
    def get_access_token_Second_number(number_men2, password_men2):
        url = "https://mobile.vodafone.com.eg/auth/realms/vf-realm/protocol/openid-connect/token"
        payload = {
            'username': number_men2,
            'password': password_men2,
            'grant_type': "password",
            'client_secret': "a2ec6fff-0b7f-4aa4-a733-96ceae5c84c3",
            'client_id': "my-vodafone-app"
        }
        headers = {
            'User-Agent': "okhttp/4.9.3",
            'Accept': "application/json, text/plain, */*",
            'Accept-Encoding': "gzip",
            'x-agent-operatingsystem': "V12.5.13.0.RJQMIXM",
            'clientId': "xxx",
            'x-agent-device': "lime",
            'x-agent-version': "2024.10.1",
            'x-agent-build': "562"
        }
        r1 = requests.post(url, data=payload, headers=headers).json()
        if 'access_token' not in r1:
            print(Fore.RED + "‚ùå Login failed for the second member.")
            return None

        acc = "Bearer " + r1['access_token']
        print(Fore.GREEN + "‚úÖ Second member login successful!")
        return acc

        
    def Send_Invite(number_oner, number_men2 , password_oner):
        # Sending invitation to the second member
        access_token = get_access_token_Owner(number_oner, password_oner)
        if not access_token:
            return False
            
        quota_value = next(quota_cycle)
        print(quota_value)
        print(Fore.CYAN + "üì® Sending invitation to the second member...")
        url = "https://web.vodafone.com.eg/services/dxl/cg/customerGroupAPI/customerGroup"
        payload = {
          "name": "FlexFamily",
          "type": "SendInvitation",
          "category": [
            {"value": "523", "listHierarchyId": "PackageID"},
            {"value": "47", "listHierarchyId": "TemplateID"},
            {"value": "523", "listHierarchyId": "TierID"},
            {"value": "percentage", "listHierarchyId": "familybehavior"}
          ],
          "parts": {
            "member": [
              {"id": [{"value": number_oner, "schemeName": "MSISDN"}], "type": "Owner"},
              {"id": [{"value": number_men2, "schemeName": "MSISDN"}], "type": "Member"}
            ],
            "characteristicsValue": {
              "characteristicsValue": [
                {"characteristicName": "quotaDist1", "value": quota_value, "type": "percentage"}
              ]
            }
          }
        }
        headers = {
          'User-Agent': "Mozilla/5.0 (Linux; Android 11; M2010J19SG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.85 Mobile Safari/537.36",
          'Accept': "application/json",
          'Content-Type': "application/json",
          'sec-ch-ua': "\"Chromium\";v=\"94\", \"Google Chrome\";v=\"94\", \";Not A Brand\";v=\"99\"",
          'msisdn': number_oner,
          'Accept-Language': "AR",
          'sec-ch-ua-mobile': "?1",
          'Authorization': access_token,
          'x-dtpc': "5$160966758_702h19vRCUAEMOMIIASTHWKLEMFNIHJNUTANVVK-0e0",
          'clientId': "WebsiteConsumer",
          'sec-ch-ua-platform': "\"Android\"",
          'Origin': "https://web.vodafone.com.eg",
          'Sec-Fetch-Site': "same-origin",
          'Sec-Fetch-Mode': "cors",
          'Sec-Fetch-Dest': "empty",
          'Referer': "https://web.vodafone.com.eg/spa/familySharing",
        }
        response = requests.post(url, data=json.dumps(payload), headers=headers)
        print(Fore.MAGENTA + "üì§ Invitation send response:")
        print(response.text)
        return True

    def Accept_Invite(number_oner, number_men2, password_men2):
        acc = get_access_token_Second_number(number_men2, password_men2)
        if not acc:
            return False
            
        print(Fore.CYAN + "üì© Accepting the invitation...")
        url = "https://mobile.vodafone.com.eg/services/dxl/cg/customerGroupAPI/customerGroup"
        payload = {
          "category": [{"listHierarchyId": "TemplateID", "value": "47"}],
          "name": "FlexFamily",
          "parts": {
            "member": [
              {"id": [{"schemeName": "MSISDN", "value": number_oner}], "type": "Owner"},
              {"id": [{"schemeName": "MSISDN", "value": number_men2}], "type": "Member"}
            ]
          },
          "type": "AcceptInvitation"
        }
        headers = {
          'User-Agent': "okhttp/4.11.0",
          'Connection': "Keep-Alive",
          'Accept': "application/json",
          'Accept-Encoding': "gzip",
          'Content-Type': "application/json",
          'api_id': "APP",
          'x-dynatrace': "MT_3_24_3486379639_64-0_a556db1b-4506-43f3-854a-1d2527767923_0_187_277",
          'Authorization': acc,
          'api-version': "v2",
          'x-agent-operatingsystem': "13",
          'clientId': "AnaVodafoneAndroid",
          'x-agent-device': "Xiaomi 21061119AG",
          'x-agent-version': "2024.12.1",
          'x-agent-build': "946",
          'msisdn': number_men2,
          'Accept-Language': "ar",
          'Content-Type': "application/json; charset=UTF-8"
        }
        response = requests.patch(url, data=json.dumps(payload), headers=headers)
        print(Fore.MAGENTA + "üì• Invitation accept response:")
        print(response.text)
        return True
        
    def Change_Quota(number_oner, number_men1, password_oner):
        access_token = get_access_token_Owner(number_oner, password_oner)
        if not access_token:
            return False
            
        # Changing quota distribution
        print(Fore.CYAN + "üîÑ Changing quota distribution...")
        url = "https://web.vodafone.com.eg/services/dxl/cg/customerGroupAPI/customerGroup"
        payload = {
          "name": "FlexFamily",
          "type": "QuotaRedistribution",
          "category": [
            {"value": "523", "listHierarchyId": "PackageID"},
            {"value": "47", "listHierarchyId": "TemplateID"},
            {"value": "523", "listHierarchyId": "TierID"},
            {"value": "percentage", "listHierarchyId": "familybehavior"}
          ],
          "parts": {
            "member": [
              {"id": [{"value": number_oner, "schemeName": "MSISDN"}], "type": "Owner"},
              {"id": [{"value": number_men1, "schemeName": "MSISDN"}], "type": "Member"}
            ],
            "characteristicsValue": {
              "characteristicsValue": [
                {"characteristicName": "quotaDist1", "value": "40", "type": "percentage"}
              ]
            }
          }
        }
        headers = {
          'User-Agent': "Mozilla/5.0 (Linux; Android 11; M2010J19SG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.85 Mobile Safari/537.36",
          'Accept': "application/json",
          'Content-Type': "application/json",
          'sec-ch-ua': "\"Chromium\";v=\"94\", \"Google Chrome\";v=\"94\", \";Not A Brand\";v=\"99\"",
          'msisdn': number_oner,
          'Accept-Language': "AR",
          'sec-ch-ua-mobile': "?1",
          'Authorization': access_token,
          'x-dtpc': "5$160966758_702h19vRCUAEMOMIIASTHWKLEMFNIHJNUTANVVK-0e0",
          'clientId': "WebsiteConsumer",
          'sec-ch-ua-platform': "\"Android\"",
          'Origin': "https://web.vodafone.com.eg",
          'Sec-Fetch-Site': "same-origin",
          'Sec-Fetch-Mode': "cors",
          'Sec-Fetch-Dest': "empty",
          'Referer': "https://web.vodafone.com.eg/spa/familySharing",
        }
        response = requests.post(url, data=json.dumps(payload), headers=headers)
        print(Fore.MAGENTA + "üì§ Quota redistribution response:")
        print(response.text)
        return True
        
    def Remove_Number(number_oner, number_men2, password_oner):
        access_token = get_access_token_Owner(number_oner, password_oner)
        if not access_token:
            return False
            
        print(Fore.CYAN + "üóëÔ∏è Removing the second member...")
        url = "https://web.vodafone.com.eg/services/dxl/cg/customerGroupAPI/customerGroup"
        payload = {
          "name": "FlexFamily",
          "type": "FamilyRemoveMember",
          "category": [{"value": "47", "listHierarchyId": "TemplateID"}],
          "parts": {
            "member": [
              {"id": [{"value": number_oner, "schemeName": "MSISDN"}], "type": "Owner"},
              {"id": [{"value": number_men2, "schemeName": "MSISDN"}], "type": "Member"}
            ],
            "characteristicsValue": {
              "characteristicsValue": [
                {"characteristicName": "Disconnect", "value": "0"},
                {"characteristicName": "LastMemberDeletion", "value": "1"}
              ]
            }
          }
        }
        headers = {
          'User-Agent': "Mozilla/5.0 (Linux; Android 11; M2010J19SG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.85 Mobile Safari/537.36",
          'Accept': "application/json",
          'Content-Type': "application/json",
          'sec-ch-ua': "\"Chromium\";v=\"94\", \"Google Chrome\";v=\"94\", \";Not A Brand\";v=\"99\"",
          'msisdn': number_oner,
          'Accept-Language': "AR",
          'sec-ch-ua-mobile': "?1",
          'Authorization': access_token,
          'x-dtpc': "8$160966758_702h28vFSPMIAKHHWGIIKVDPLHCDFHKOJUBFNJP-0e0",
          'clientId': "WebsiteConsumer",
          'sec-ch-ua-platform': "\"Android\"",
          'Origin': "https://web.vodafone.com.eg",
          'Sec-Fetch-Site': "same-origin",
          'Sec-Fetch-Mode': "cors",
          'Sec-Fetch-Dest': "empty",
          'Referer': "https://web.vodafone.com.eg/spa/familySharing",
        }
        response = requests.patch(url, data=json.dumps(payload), headers=headers)
        print(Fore.MAGENTA + "üóëÔ∏è Member removal response:")
        print(response.text)
        return True

    def Reset_Qota(number_oner, number_men1, password_oner):
        access_token = get_access_token_Owner(number_oner, password_oner)
        if not access_token:
            return False
            
        print(Fore.CYAN + "üîÑ Redistributing quota to the original value...")
        url = "https://web.vodafone.com.eg/services/dxl/cg/customerGroupAPI/customerGroup"
        payload = {
          "name": "FlexFamily",
          "type": "QuotaRedistribution",
          "category": [
            {"value": "523", "listHierarchyId": "PackageID"},
            {"value": "47", "listHierarchyId": "TemplateID"},
            {"value": "523", "listHierarchyId": "TierID"},
            {"value": "percentage", "listHierarchyId": "familybehavior"}
          ],
          "parts": {
            "member": [
              {"id": [{"value": number_oner, "schemeName": "MSISDN"}], "type": "Owner"},
              {"id": [{"value": number_men1, "schemeName": "MSISDN"}], "type": "Member"}
            ],
            "characteristicsValue": {
              "characteristicsValue": [
                {"characteristicName": "quotaDist1", "value": "10", "type": "percentage"}
              ]
            }
          }
        }
        headers = {
          'User-Agent': "Mozilla/5.0 (Linux; Android 11; M2010J19SG) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.85 Mobile Safari/537.36",
          'Accept': "application/json",
          'Content-Type': "application/json",
          'sec-ch-ua': "\"Chromium\";v=\"94\", \"Google Chrome\";v=\"94\", \";Not A Brand\";v=\"99\"",
          'msisdn': number_oner,
          'Accept-Language': "AR",
          'sec-ch-ua-mobile': "?1",
          'Authorization': access_token,
          'x-dtpc': "5$160966758_702h19vRCUAEMOMIIASTHWKLEMFNIHJNUTANVVK-0e0",
          'clientId': "WebsiteConsumer",
          'sec-ch-ua-platform': "\"Android\"",
          'Origin': "https://web.vodafone.com.eg",
          'Sec-Fetch-Site': "same-origin",
          'Sec-Fetch-Mode': "cors",
          'Sec-Fetch-Dest': "empty",
          'Referer': "https://web.vodafone.com.eg/spa/familySharing",
        }
        response = requests.post(url, data=json.dumps(payload), headers=headers)
        print(Fore.MAGENTA + "üì§ Quota redistribution response:")
        print(response.text)
        return True

    for i in range(10):
        if stop_flag:
            print(Fore.YELLOW + "üõë Process stopped by user")
            return
            
        print(Fore.YELLOW + f"\nüåÄ Starting cycle number {i+1}")
        Send_Invite(number_oner, number_men2 , password_oner)
        
        for j in range(10):
            if stop_flag:
                print(Fore.YELLOW + "üõë Process stopped by user")
                return
            time.sleep(1)
            
        t1 = threading.Thread(target=Accept_Invite, args=(number_oner, number_men2, password_men2))
        t2 = threading.Thread(target=Change_Quota, args=(number_oner, number_men1, password_oner))
        t1.start()
        t2.start()
        t1.join()
        t2.join()
        
        for j in range(5):
            if stop_flag:
                print(Fore.YELLOW + "üõë Process stopped by user")
                return
            time.sleep(1)
            
        Remove_Number(number_oner, number_men2, password_oner)
        
        seconds_left1 = 301
        while seconds_left1 > 0:
            if stop_flag:
                print(Fore.YELLOW + "üõë Process stopped by user")
                return
            print(Fore.YELLOW + f"Time remaining: {seconds_left1} seconds", end='\r')
            time.sleep(1)
            seconds_left1 -= 1
            
        Reset_Qota(number_oner, number_men1, password_oner)
        
        seconds_left2 = 301
        while seconds_left2 > 0:
            if stop_flag:
                print(Fore.YELLOW + "üõë Process stopped by user")
                return
            print(Fore.YELLOW + f"Time remaining: {seconds_left2} seconds", end='\r')
            time.sleep(1)
            seconds_left2 -= 1

    print(Fore.GREEN + "\nüéâ All cycles completed successfully")

def stop_script():
    global stop_flag
    stop_flag = True

# Ÿàÿ∏ÿßÿ¶ŸÅ ÿßŸÑÿ®Ÿàÿ™ ÿßŸÑÿ™ŸÑŸäÿ¨ÿ±ÿßŸÖ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ÿ®ÿØÿ° ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© Ÿàÿ∑ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™."""
    await update.message.reply_text(
        "ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿßŸÑÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿ™ÿßŸÑŸä ŸÅŸä ÿ±ÿ≥ÿßŸÑÿ© Ÿàÿßÿ≠ÿØÿ©:\n\n"
        "ÿ±ŸÇŸÖ ÿßŸÑŸÖÿßŸÑŸÉ\nŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑŸÖÿßŸÑŸÉ\nÿ±ŸÇŸÖ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ£ŸàŸÑ\nŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ£ŸàŸÑ\nÿ±ŸÇŸÖ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ´ÿßŸÜŸä\nŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ´ÿßŸÜŸä\n\n"
        "ŸäŸÅÿ∂ŸÑ ŸÅÿµŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿ≥ÿ∑ÿ± ÿ¨ÿØŸäÿØ ÿ£Ÿà ÿ®ŸÅÿßÿµŸÑÿ©.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return INPUT_DATA

async def input_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿØÿÆŸÑÿ©."""
    text = update.message.text
    lines = text.split('\n')
    if len(lines) < 6:
        # ŸÖÿ≠ÿßŸàŸÑÿ© ÿßŸÑŸÅÿµŸÑ ÿ®ÿßŸÑŸÅÿßÿµŸÑÿ©
        lines = text.split(',')
    
    if len(lines) < 6:
        await update.message.reply_text(
            "ŸÑŸÖ Ÿäÿ™ŸÖ ÿ•ÿØÿÆÿßŸÑ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©. Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ 6 ŸÇŸäŸÖ:\n\n"
            "1. ÿ±ŸÇŸÖ ÿßŸÑŸÖÿßŸÑŸÉ\n2. ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑŸÖÿßŸÑŸÉ\n3. ÿ±ŸÇŸÖ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ£ŸàŸÑ\n4. ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ£ŸàŸÑ\n5. ÿ±ŸÇŸÖ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ´ÿßŸÜŸä\n6. ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ´ÿßŸÜŸä"
        )
        return INPUT_DATA
    
    # ÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    user_data_store[update.effective_user.id] = {
        'number_oner': lines[0].strip(),
        'password_oner': lines[1].strip(),
        'number_men1': lines[2].strip(),
        'password_men1': lines[3].strip(),
        'number_men2': lines[4].strip(),
        'password_men2': lines[5].strip()
    }
    
    # ÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    data = user_data_store[update.effective_user.id]
    confirmation = (
        f"ÿ™ŸÖ ÿßÿ≥ÿ™ŸÑÿßŸÖ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™:\n\n"
        f"ÿ±ŸÇŸÖ ÿßŸÑŸÖÿßŸÑŸÉ: {data['number_oner']}\n"
        f"ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑŸÖÿßŸÑŸÉ: {data['password_oner']}\n"
        f"ÿ±ŸÇŸÖ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ£ŸàŸÑ: {data['number_men1']}\n"
        f"ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ£ŸàŸÑ: {data['password_men1']}\n"
        f"ÿ±ŸÇŸÖ ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ´ÿßŸÜŸä: {data['number_men2']}\n"
        f"ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ÿßŸÑÿπÿ∂Ÿà ÿßŸÑÿ´ÿßŸÜŸä: {data['password_men2']}\n\n"
        f"ŸÑÿ®ÿØÿ° ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑÿå ÿ£ÿ±ÿ≥ŸÑ /run\nŸÑÿ•ÿØÿÆÿßŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿ¨ÿØŸäÿØÿ©ÿå ÿ£ÿ±ÿ≥ŸÑ /start"
    )
    
    await update.message.reply_text(confirmation)
    return ConversationHandler.END

async def run_script(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä."""
    global script_thread, script_running
    
    user_id = update.effective_user.id
    if user_id not in user_data_store:
        await update.message.reply_text("ŸÑŸÖ Ÿäÿ™ŸÖ ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿπÿØ. ÿ£ÿ±ÿ≥ŸÑ /start ŸÑÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
        return
    
    if script_running:
        await update.message.reply_text("ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™ ŸäÿπŸÖŸÑ ÿ®ÿßŸÑŸÅÿπŸÑ.")
        return
    
    data = user_data_store[user_id]
    
    # ÿ™Ÿàÿ¨ŸäŸá output ÿ•ŸÑŸâ buffer ÿßŸÑÿÆÿßÿµ ÿ®ŸÜÿß
    sys.stdout = script_output
    
    # ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™ ŸÅŸä thread ŸÖŸÜŸÅÿµŸÑ
    script_running = True
    script_thread = threading.Thread(
        target=main_function,
        args=(
            data['number_oner'],
            data['password_oner'],
            data['number_men1'],
            data['password_men1'],
            data['number_men2'],
            data['password_men2']
        )
    )
    script_thread.daemon = True
    script_thread.start()
    
    # ÿ®ÿØÿ° ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ÿßÿ™
    context.job_queue.run_repeating(send_updates, interval=10, first=5, chat_id=update.effective_chat.id, name=str(update.effective_chat.id))
    
    await update.message.reply_text("ÿ®ÿØÿ£ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™. ÿ≥ÿ£ÿ±ÿ≥ŸÑ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ŸÉŸÑ 10 ÿ´ŸàÿßŸÜŸç.")

async def send_updates(context: ContextTypes.DEFAULT_TYPE):
    """ÿ•ÿ±ÿ≥ÿßŸÑ ÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ output ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™."""
    global script_running
    
    output = script_output.get_output()
    if output:
        # ÿ™ŸÇÿ≥ŸäŸÖ ÿßŸÑŸÜÿµ ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿ∑ŸàŸäŸÑÿßŸã
        if len(output) > 4000:
            parts = [output[i:i+4000] for i in range(0, len(output), 4000)]
            for part in parts:
                await context.bot.send_message(chat_id=context.job.chat_id, text=f"```\n{part}\n```", parse_mode='Markdown')
        else:
            await context.bot.send_message(chat_id=context.job.chat_id, text=f"```\n{output}\n```", parse_mode='Markdown')
    
    # ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ•ÿ∞ÿß ÿßŸÜÿ™ŸáŸâ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™
    if script_thread and not script_thread.is_alive():
        script_running = False
        output = script_output.get_output()
        if output:
            if len(output) > 4000:
                parts = [output[i:i+4000] for i in range(0, len(output), 4000)]
                for part in parts:
                    await context.bot.send_message(chat_id=context.job.chat_id, text=f"```\n{part}\n```", parse_mode='Markdown')
            else:
                await context.bot.send_message(chat_id=context.job.chat_id, text=f"```\n{output}\n```", parse_mode='Markdown')
        
        await context.bot.send_message(chat_id=context.job.chat_id, text="‚úÖ ÿßŸÉÿ™ŸÖŸÑ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™.")
        context.job.schedule_removal()

async def stop_script(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™."""
    global script_running
    
    if not script_running:
        await update.message.reply_text("ŸÑÿß ŸäŸàÿ¨ÿØ ÿ≥ŸÉÿ±ÿ®ÿ™ ŸäÿπŸÖŸÑ ÿ≠ÿßŸÑŸäÿßŸã.")
        return
    
    stop_script()
    script_running = False
    
    # ÿ•ÿ±ÿ≥ÿßŸÑ ÿ¢ÿÆÿ± output
    output = script_output.get_output()
    if output:
        if len(output) > 4000:
            parts = [output[i:i+4000] for i in range(0, len(output), 4000)]
            for part in parts:
                await update.message.reply_text(f"```\n{part}\n```", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"```\n{output}\n```", parse_mode='Markdown')
    
    await update.message.reply_text("‚èπÔ∏è ÿ™ŸÖ ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©."""
    await update.message.reply_text(
        "ÿ™ŸÖ ÿßŸÑÿ•ŸÑÿ∫ÿßÿ°.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ©."""
    help_text = (
        "ÿ£ŸàÿßŸÖÿ± ÿßŸÑÿ®Ÿàÿ™:\n\n"
        "/start - ÿ®ÿØÿ° ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™\n"
        "/run - ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™ ÿ®ÿπÿØ ÿ•ÿØÿÆÿßŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™\n"
        "/stop - ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ≥ŸÉÿ±ÿ®ÿ™ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ\n"
        "/help - ÿπÿ±ÿ∂ Ÿáÿ∞Ÿá ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©"
    )
    await update.message.reply_text(help_text)

def main() -> None:
    """ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™."""
    # ÿßÿ≥ÿ™ÿ®ÿØŸÑ "YOUR_BOT_TOKEN" ÿ®ŸÄ token ÿßŸÑÿ®Ÿàÿ™ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ
    application = Application.builder().token("8330939461:AAEUaMYi3UI_sx1pkrSqXT--Hgfzo21zHUg").build()

    # ÿ•ÿπÿØÿßÿØ ŸÖÿπÿßŸÑÿ¨ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            INPUT_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_data)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿπÿßŸÑÿ¨ÿßÿ™
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("run", run_script))
    application.add_handler(CommandHandler("stop", stop_script))
    application.add_handler(CommandHandler("help", help_command))

    # ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ®Ÿàÿ™
    application.run_polling()

if __name__ == '__main__':
    main()
